// Code generated by Microsoft (R) AutoRest Code Generator 0.16.0.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace Encode.Client.Models
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Newtonsoft.Json;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;

    public partial class Customer
    {
        /// <summary>
        /// Initializes a new instance of the Customer class.
        /// </summary>
        public Customer() { }

        /// <summary>
        /// Initializes a new instance of the Customer class.
        /// </summary>
        public Customer(string title, int? id = default(int?), int? numberOfEmployees = default(int?))
        {
            Id = id;
            Title = title;
            NumberOfEmployees = numberOfEmployees;
        }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Id")]
        public int? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "Title")]
        public string Title { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "NumberOfEmployees")]
        public int? NumberOfEmployees { get; set; }

        /// <summary>
        /// Validate the object. Throws ValidationException if validation fails.
        /// </summary>
        public virtual void Validate()
        {
            if (Title == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Title");
            }
            if (this.Title != null)
            {
                if (this.Title.Length > 200)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Title", 200);
                }
                if (this.Title.Length < 0)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Title", 0);
                }
            }
            if (this.NumberOfEmployees > 10000)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "NumberOfEmployees", 10000);
            }
            if (this.NumberOfEmployees < 0)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "NumberOfEmployees", 0);
            }
        }
    }
}
